parameters:
  name: 'prepare'                                           # the name of the job
  displayName: 'Prepare for building'                       # the human name
  dependsOn: []                                             # the dependencies
  masterBranchName: 'master'                                # the "master" branch that should be used - can be something other than "master"

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    dependsOn: ${{ parameters.dependsOn }}
    variables:
      skipComponentGovernanceDetection: true
    pool:
      name: 'Hosted Ubuntu 1604'
    steps:
      - checkout: none
      - pwsh: |
          # determine the "master" branch
          $masterBranch = "${{ parameters.masterBranchName }}"
          $encodedBranch = [Uri]::EscapeDataString("refs/heads/$masterBranch")
          Write-Host "Master branch: $masterBranch"

          # determine the "current" branch
          $branch = "$(Build.SourceBranchName)"
          if ("$env:SYSTEM_PULLREQUEST_TARGETBRANCH") {
            $branch = "$env:SYSTEM_PULLREQUEST_TARGETBRANCH"
          }
          Write-Host "Current branch: $branch"

          if ($branch -eq $masterBranch) {
            Write-Host "Branch is master, fetching last successful build commit..."

            $url = "$(System.TeamFoundationCollectionUri)$(System.TeamProjectId)/_apis/build/builds/?definitions=$(System.DefinitionId)&branchName=$encodedBranch&statusFilter=completed&resultFilter=succeeded&api-version=5.0"
            Write-Host "URL for last successful master build: $url"

            $json = Invoke-RestMethod -Uri $url -Headers @{
                Authorization = "Bearer $(System.AccessToken)"
            }
            Write-Host "JSON response:"
            Write-Host "$json"

            $lastSuccessfulBuildCommit = try { $json.value[0].sourceVersion; } catch { $null }
          }

          if ($lastSuccessfulBuildCommit) {
            Write-Host "Last successful commit: $lastSuccessfulBuildCommit"
          } else {
            $lastSuccessfulBuildCommit = $masterBranch
            Write-Host "No previously successful build found, using this branch: $lastSuccessfulBuildCommit"
          }

          Write-Host "##vso[task.setvariable variable=GitLastSuccessfulCommit;isOutput=true]$lastSuccessfulBuildCommit"
        name: lastSuccessful
        displayName: 'Find the last successful commit'
