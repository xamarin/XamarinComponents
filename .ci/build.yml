parameters:
  # job parameters
  name: 'build'
  displayName: 'Build'
  dependsOn: []
  preBuildSteps: []
  postBuildSteps: []
  prepareJobName: 'prepare'
  # job software version parameters
  macosImage: 'Hosted macOS'
  windowsImage: 'Hosted Windows 2019 with VS2019'
  mono: '5_18_1'
  xcode: '10.3'
  dotnet: '2.2.401'
  cake: '0.34.1'
  apiTools: '1.0.2-preview.14'
  tools: {}
  # build parameters
  buildType: 'basic'
  verbosity: 'normal'
  cakeExtraArgs: ''
  cakeFile: 'build.cake'
  # basic cake build parameters
  target: 'ci'
  # manifest-based build parameters
  forceBuild: $(ForceBuild)
  namesFilter: $(BuildManifestNames)
  targetsFilter: $(BuildManifestTargets)

jobs:
  - job: ${{ parameters.name }}
    strategy:
      matrix:
        ${{ if ne(parameters.macosImage, '') }}:
          macos:
            imageName: ${{ parameters.macosImage }}
        ${{ if ne(parameters.windowsImage, '') }}:
          windows:
            imageName: ${{ parameters.windowsImage }}
    displayName: ${{ parameters.displayName }}
    dependsOn:
     - ${{ parameters.prepareJobName }}
     - ${{ parameters.dependsOn }}
    variables:
      GitLastSuccessfulCommit: $[ dependencies['${{ parameters.prepareJobName }}'].outputs['lastSuccessful.GitLastSuccessfulCommit'] ]
    pool:
      name: $(imageName)
    steps:
      # before the build starts
      - bash: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh ${{ parameters.mono }}
        displayName: 'Switch to the latest Xamarin SDK'
        condition: eq(variables['System.JobName'], 'macos')
      - bash: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_${{ parameters.xcode }}.app;sudo xcode-select --switch /Applications/Xcode_${{ parameters.xcode }}.app/Contents/Developer
        displayName: 'Switch to the latest Xcode'
        condition: eq(variables['System.JobName'], 'macos')
      - bash: echo '##vso[task.setvariable variable=PATH;]'$PATH:$HOME/.dotnet/tools
        displayName: 'Add ~/.dotnet/tools to the PATH environment variable'
        condition: eq(variables['System.JobName'], 'macos')
      - task: UseDotNet@2
        displayName: 'Switch to the correct version of the .NET Core SDK'
        inputs:
          version: ${{ parameters.dotnet }}
      - pwsh: |
          dotnet tool install -g api-tools --version ${{ parameters.apiTools }}
          dotnet tool install -g cake.tool --version ${{ parameters.cake }}
        displayName: 'Install required .NET Core global tools'
      - ${{ each tool in parameters.tools }}:
        - ${{ each pair in tool }}:
          - pwsh: dotnet tool install -g ${{ pair.key }} --version ${{ pair.value }}
            displayName: 'Install additional .NET Core global tool: ${{ pair.key }}'
      - task: NuGetToolInstaller@1
        inputs:
          checkLatest: true
        displayName: 'Download the latest nuget.exe'
      # custom pre-build steps
      - ${{ parameters.preBuildSteps }}
      # the basic build
      - ${{ if eq(parameters.buildType, 'basic') }}:
        - pwsh: |
            dotnet cake ${{ parameters.cakeFile }} `
              --gitpreviouscommit="$(GitLastSuccessfulCommit)" `
              --gitcommit="$(Build.SourceVersion)" `
              --target="${{ parameters.cakeTarget }}" `
              --verbosity="${{ parameters.verbosity }}" `
              ${{ parameters.cakeExtraArgs }}
          displayName: 'Run build'
          env:
            JavaSdkDirectory: $(JAVA_HOME)
      # the manifest-based build
      - ${{ if eq(parameters.buildType, 'manifest') }}:
        - pwsh: |
            $branch = "master"
            if ("$(Build.Repository.Id)" -eq "xamarin/XamarinComponents") {
              if ("$(System.PullRequest.SourceBranch)") {
                $branch = "$(System.PullRequest.SourceBranch)"
              } else {
                $branch = "$(Build.SourceBranchName)"
              }
            }
            $uri = "https://raw.githubusercontent.com/xamarin/XamarinComponents/$branch/.ci/build.cake"
            Write-Host "Downloading script from $uri..."
            Invoke-WebRequest -Uri $uri -OutFile "${{ parameters.cakeFile }}"
          displayName: 'Download the cake script'
        - pwsh: |
            dotnet cake ${{ parameters.cakeFile }} `
              --gitpreviouscommit="$(GitLastSuccessfulCommit)" `
              --gitcommit="$(Build.SourceVersion)" `
              --forcebuild="${{ parameters.forceBuild }}" `
              --names="${{ parameters.namesFilter }}" `
              --targets="${{ parameters.targetsFilter }}" `
              --copyoutputtoroot=true `
              --verbosity="${{ parameters.verbosity }}" `
              ${{ parameters.cakeExtraArgs }}
          displayName: 'Run build'
          env:
            JavaSdkDirectory: $(JAVA_HOME)
      # custom post-build steps
      - ${{ parameters.postBuildSteps }}
      # after the build is complete
      - pwsh: |
          if (Get-ChildItem artifacts -Filter *.nupkg) {
            api-tools nuget-diff artifacts --latest --group-ids --output artifacts/api-diff --cache externals/package_cache
          }
        displayName: 'Generate API diff'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifacts'
        inputs:
          PathToPublish: artifacts
          ArtifactName: nuget
